/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.FileSystems;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
// I got help from my TA for reading the path using ClassLoader
    @Test
    void callLinesTest1 () { //one error

        ClassLoader classLoader = getClass().getClassLoader();
        String path1 = classLoader.getResource("oneError.js").getPath();
        File file = new File(path1);
        ArrayList<String> test1 = App.callLines(file);
        ArrayList<String> correctAnswer1 = new ArrayList<>();
        correctAnswer1.add("Line 2: Missing semicolon.");
        assertEquals(correctAnswer1, test1);
    }
    @Test
    void callLinesTest2 () { //many errors

        ClassLoader classLoader = getClass().getClassLoader();
        String path1 = classLoader.getResource("gates.js").getPath();
        File file = new File(path1);
        ArrayList<String> test1 = App.callLines(file);
        ArrayList<String> correctAnswer5= new ArrayList<>();
        correctAnswer5.add("Line 2: Missing semicolon.");
        correctAnswer5.add("Line 3: Missing semicolon.");
        correctAnswer5.add("Line 4: Missing semicolon.");
        correctAnswer5.add("Line 5: Missing semicolon.");
        correctAnswer5.add("Line 6: Missing semicolon.");
        correctAnswer5.add("Line 7: Missing semicolon.");
        correctAnswer5.add("Line 8: Missing semicolon.");
        correctAnswer5.add("Line 9: Missing semicolon.");
        assertEquals(correctAnswer5, test1);
    }
    @Test
    void callLinesTest3 () { //no errors file

        ClassLoader classLoader = getClass().getClassLoader();
        String path1 = classLoader.getResource("NoErrorsFile.js").getPath();
        File file = new File(path1);
        ArrayList<String> test1 = App.callLines(file);
        ArrayList<String> correctAnswer1 = new ArrayList<>();

        assertEquals(correctAnswer1, test1);
    }
    @Test
    void callLinesTest4 () { //few errors

        ClassLoader classLoader = getClass().getClassLoader();
        String path1 = classLoader.getResource("fewErrors.js").getPath();
        File file = new File(path1);
        ArrayList<String> test1 = App.callLines(file);
        ArrayList<String> correctAnswer3 = new ArrayList<>();
        correctAnswer3.add("Line 2: Missing semicolon.");
        correctAnswer3.add("Line 5: Missing semicolon.");
        correctAnswer3.add("Line 9: Missing semicolon.");

        assertEquals(correctAnswer3, test1);
    }
    @Test
    void callLinesTest5 () { //empty file

        ClassLoader classLoader = getClass().getClassLoader();
        String path1 = classLoader.getResource("empty.js").getPath();
        File file = new File(path1);
        ArrayList<String> test1 = App.callLines(file);
        ArrayList<String> correctAnswer1 = new ArrayList<>();
        assertEquals(correctAnswer1, test1);
    }

}
